{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3+3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20/4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "400"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18, 19, 18, 23]\n",
      "[20, 15, 13, 19]\n"
     ]
    }
   ],
   "source": [
    "ages =  [18,19,18,23] \n",
    "grades= [20, 15, 13, 19]\n",
    "print ages\n",
    "print grades"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ages[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sally', 'Jason', 'Bob', 'Susy']\n",
      "[True, False, False, True]\n",
      "[18, 19, 18, 23]\n",
      "[20, 15, 13, 19]\n"
     ]
    }
   ],
   "source": [
    "names=[\"Sally\", \"Jason\", \"Bob\", \"Susy\"]\n",
    "female=[True, False, False, True]\n",
    "teachers=[\"Smith\", \"Johnson\", \"Johnson\", \"Smith\"]\n",
    "ages =  [18,19,18,23] \n",
    "grades= [20, 15, 13, 19]\n",
    "print names\n",
    "print female\n",
    "print ages\n",
    "print grades\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "namesNP=np.array(names, np.string_) \n",
    "femaleNP=np.array(female, np.bool_)\n",
    "teachersNP=np.array(teachers, np.string_)\n",
    "agesNP=np.array(ages,  np.int32)\n",
    "gradesNP=np.array(grades, np.int32)\n",
    "\n",
    "alldata=np.array([names, female, teachers, ages, grades])\n",
    "alldata2=np.array([namesNP, femaleNP, teachersNP, agesNP, gradesNP])\n",
    "somedata=np.array([agesNP, gradesNP])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['Sally' 'Jason' 'Bob' 'Susy']\n",
      " ['True' 'False' 'False' 'True']\n",
      " ['Smith' 'Johnson' 'Johnson' 'Smith']\n",
      " ['18' '19' '18' '23']\n",
      " ['20' '15' '13' '19']]\n",
      "[['Sally' 'Jason' 'Bob' 'Susy']\n",
      " ['True' 'False' 'False' 'True']\n",
      " ['Smith' 'Johnson' 'Johnson' 'Smith']\n",
      " ['18' '19' '18' '23']\n",
      " ['20' '15' '13' '19']]\n",
      "[[18 19 18 23]\n",
      " [20 15 13 19]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(5, 4)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print alldata\n",
    "print alldata2\n",
    "print somedata\n",
    "alldata.shape\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[80 60 52 76]\n",
      "[80 60 52 76]\n"
     ]
    }
   ],
   "source": [
    "percentNP=np.array(np.multiply(grades, 4))\n",
    "print percentNP\n",
    "\n",
    "percentNP2=np.multiply(gradesNP, 4)\n",
    "print percentNP2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([20, 15, 13, 19])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gradesNP.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18 19 18 23]\n",
      "[19 20 19 24]\n"
     ]
    }
   ],
   "source": [
    "print agesNP\n",
    "agesNP=np.add(agesNP, 1)\n",
    "print agesNP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sally\n"
     ]
    }
   ],
   "source": [
    "#Matrices can be specified by explicitly indicating the row and column, as follows. \n",
    "print alldata[0,0] #test \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
