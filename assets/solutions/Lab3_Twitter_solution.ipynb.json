{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Lab 3\n",
    "\n",
    "\n",
    "This is adopted from [Mining the Social Web, 2nd Edition](http://bit.ly/16kGNyb)\n",
    "Copyright (c) 2013, Matthew A. Russell\n",
    "All rights reserved.\n",
    "\n",
    "This work is licensed under the [Simplified BSD License](https://github.com/ptwobrussell/Mining-the-Social-Web-2nd-Edition/blob/master/LICENSE.txt)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step1.  Authorizing an application to access Twitter account data\n",
    "\n",
    "You have gone through the process of creating an application.  Now let's \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<twitter.api.Twitter object at 0xb158af8c>\n"
     ]
    }
   ],
   "source": [
    "import twitter\n",
    "\n",
    "# XXX: Go to http://dev.twitter.com/apps/new to create an app and get values\n",
    "# for these credentials, which you'll need to provide in place of these\n",
    "# empty string values that are defined as placeholders.\n",
    "# See https://dev.twitter.com/docs/auth/oauth for more information \n",
    "# on Twitter's OAuth implementation.\n",
    "\n",
    "CONSUMER_KEY = 'v0qhry1dyQkRVYsz5J533g'\n",
    "CONSUMER_SECRET ='NSxooGp7vH9xN0p0z6Gb6UZnXfs24cwGUzMtPH4UE'\n",
    "OAUTH_TOKEN = '18250462-GtKQhzUY5Ov11Xl5PqfKWl60gfs5FAtosXPheRf0'\n",
    "OAUTH_TOKEN_SECRET = 'nIEvhakOQPc55ZjvsdqFas6ISkAw99DRQWHXLTgrw'\n",
    "\n",
    "auth = twitter.oauth.OAuth(OAUTH_TOKEN, OAUTH_TOKEN_SECRET,\n",
    "                           CONSUMER_KEY, CONSUMER_SECRET)\n",
    "\n",
    "twitter_api = twitter.Twitter(auth=auth)\n",
    "\n",
    "# Nothing to see by displaying twitter_api except that it's now a\n",
    "# defined variable\n",
    "\n",
    "print twitter_api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2015-09-29 14:49:19--  http://www.google.com/\n",
      "Resolving www.google.com (www.google.com)... 74.125.228.242, 74.125.228.244, 74.125.228.243, ...\n",
      "Connecting to www.google.com (www.google.com)|74.125.228.242|:80... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: unspecified [text/html]\n",
      "Saving to: 'index.html.1'\n",
      "\n",
      "    [ <=>                                   ] 19,322      --.-K/s   in 0.08s   \n",
      "\n",
      "2015-09-29 14:49:20 (251 KB/s) - 'index.html.1' saved [19322]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Testing network connection from your VM to \n",
    "!wget www.google.com\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The outcoming of running the above API is to generate a twitter object. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2. Getting Help"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on package twitter:\n",
      "\n",
      "NAME\n",
      "    twitter - The minimalist yet fully featured Twitter API and Python toolset.\n",
      "\n",
      "FILE\n",
      "    /usr/local/lib/python2.7/dist-packages/twitter/__init__.py\n",
      "\n",
      "DESCRIPTION\n",
      "    The Twitter and TwitterStream classes are the key to building your own\n",
      "    Twitter-enabled applications.\n",
      "    \n",
      "    \n",
      "    The Twitter class\n",
      "    -----------------\n",
      "    \n",
      "    The minimalist yet fully featured Twitter API class.\n",
      "    \n",
      "    Get RESTful data by accessing members of this class. The result\n",
      "    is decoded python objects (lists and dicts).\n",
      "    \n",
      "    The Twitter API is documented at:\n",
      "    \n",
      "      http://dev.twitter.com/doc\n",
      "    \n",
      "    \n",
      "    Examples::\n",
      "    \n",
      "        from twitter import *\n",
      "    \n",
      "        t = Twitter(\n",
      "            auth=OAuth(token, token_key, con_secret, con_secret_key))\n",
      "    \n",
      "        # Get your \"home\" timeline\n",
      "        t.statuses.home_timeline()\n",
      "    \n",
      "        # Get a particular friend's timeline\n",
      "        t.statuses.user_timeline(screen_name=\"billybob\")\n",
      "    \n",
      "        # to pass in GET/POST parameters, such as `count`\n",
      "        t.statuses.home_timeline(count=5)\n",
      "    \n",
      "        # to pass in the GET/POST parameter `id` you need to use `_id`\n",
      "        t.statuses.oembed(_id=1234567890)\n",
      "    \n",
      "        # Update your status\n",
      "        t.statuses.update(\n",
      "            status=\"Using @sixohsix's sweet Python Twitter Tools.\")\n",
      "    \n",
      "        # Send a direct message\n",
      "        t.direct_messages.new(\n",
      "            user=\"billybob\",\n",
      "            text=\"I think yer swell!\")\n",
      "    \n",
      "        # Get the members of tamtar's list \"Things That Are Rad\"\n",
      "        t.lists.members(owner_screen_name=\"tamtar\", slug=\"things-that-are-rad\")\n",
      "    \n",
      "        # An *optional* `_timeout` parameter can also be used for API\n",
      "        # calls which take much more time than normal or twitter stops\n",
      "        # responding for some reason:\n",
      "        t.users.lookup(\n",
      "            screen_name=','.join(A_LIST_OF_100_SCREEN_NAMES),             _timeout=1)\n",
      "    \n",
      "        # Overriding Method: GET/POST\n",
      "        # you should not need to use this method as this library properly\n",
      "        # detects whether GET or POST should be used, Nevertheless\n",
      "        # to force a particular method, use `_method`\n",
      "        t.statuses.oembed(_id=1234567890, _method='GET')\n",
      "    \n",
      "        # Send a tweet with an image included (or set your banner or logo similarily)\n",
      "        # by just reading your image from the web or a file in a string:\n",
      "        status = \"PTT &#9733;\"\n",
      "        with open(\"example.png\", \"rb\") as imagefile:\n",
      "            params = {\"media[]\": imagefile.read(), \"status\": status}\n",
      "        t.statuses.update_with_media(**params)\n",
      "    \n",
      "        # Or by sending a base64 encoded image:\n",
      "        params = {\"media[]\": base64_image, \"status\": status, \"_base64\": True}\n",
      "        t.statuses.update_with_media(**params)\n",
      "    \n",
      "    \n",
      "    Searching Twitter::\n",
      "    \n",
      "        # Search for the latest tweets about #pycon\n",
      "        t.search.tweets(q=\"#pycon\")\n",
      "    \n",
      "    \n",
      "    Using the data returned\n",
      "    -----------------------\n",
      "    \n",
      "    Twitter API calls return decoded JSON. This is converted into\n",
      "    a bunch of Python lists, dicts, ints, and strings. For example::\n",
      "    \n",
      "        x = twitter.statuses.home_timeline()\n",
      "    \n",
      "        # The first 'tweet' in the timeline\n",
      "        x[0]\n",
      "    \n",
      "        # The screen name of the user who wrote the first 'tweet'\n",
      "        x[0]['user']['screen_name']\n",
      "    \n",
      "    \n",
      "    Getting raw XML data\n",
      "    --------------------\n",
      "    \n",
      "    If you prefer to get your Twitter data in XML format, pass\n",
      "    format=\"xml\" to the Twitter object when you instantiate it::\n",
      "    \n",
      "        twitter = Twitter(format=\"xml\")\n",
      "    \n",
      "    The output will not be parsed in any way. It will be a raw string\n",
      "    of XML.\n",
      "    \n",
      "    \n",
      "    The TwitterStream class\n",
      "    -----------------------\n",
      "    \n",
      "    The TwitterStream object is an interface to the Twitter Stream\n",
      "    API. This can be used pretty much the same as the Twitter class\n",
      "    except the result of calling a method will be an iterator that\n",
      "    yields objects decoded from the stream. For example::\n",
      "    \n",
      "        twitter_stream = TwitterStream(auth=OAuth(...))\n",
      "        iterator = twitter_stream.statuses.sample()\n",
      "    \n",
      "        for tweet in iterator:\n",
      "            # ...do something with this tweet...\n",
      "    \n",
      "    Per default the ``TwitterStream`` object uses\n",
      "    [public streams](https://dev.twitter.com/docs/streaming-apis/streams/public).\n",
      "    If you want to use one of the other\n",
      "    [streaming APIs](https://dev.twitter.com/docs/streaming-apis), specify the URL\n",
      "    manually:\n",
      "    \n",
      "    - [Public streams](https://dev.twitter.com/docs/streaming-apis/streams/public): stream.twitter.com\n",
      "    - [User streams](https://dev.twitter.com/docs/streaming-apis/streams/user): userstream.twitter.com\n",
      "    - [Site streams](https://dev.twitter.com/docs/streaming-apis/streams/site): sitestream.twitter.com\n",
      "    \n",
      "    Note that you require the proper\n",
      "    [permissions](https://dev.twitter.com/docs/application-permission-model) to\n",
      "    access these streams. E.g. for direct messages your\n",
      "    [application](https://dev.twitter.com/apps) needs the \"Read, Write & Direct\n",
      "    Messages\" permission.\n",
      "    \n",
      "    The following example demonstrates how to retrieve all new direct messages\n",
      "    from the user stream::\n",
      "    \n",
      "        auth = OAuth(\n",
      "            consumer_key='[your consumer key]',\n",
      "            consumer_secret='[your consumer secret]',\n",
      "            token='[your token]',\n",
      "            token_secret='[your token secret]'\n",
      "        )\n",
      "        twitter_userstream = TwitterStream(auth=auth, domain='userstream.twitter.com')\n",
      "        for msg in twitter_userstream.user():\n",
      "            if 'direct_message' in msg:\n",
      "                print msg['direct_message']['text']\n",
      "    \n",
      "    The iterator will yield until the TCP connection breaks. When the\n",
      "    connection breaks, the iterator yields `{'hangup': True}`, and\n",
      "    raises `StopIteration` if iterated again.\n",
      "    \n",
      "    Similarly, if the stream does not produce heartbeats for more than\n",
      "    90 seconds, the iterator yields `{'hangup': True,\n",
      "    'heartbeat_timeout': True}`, and raises `StopIteration` if\n",
      "    iterated again.\n",
      "    \n",
      "    The `timeout` parameter controls the maximum time between\n",
      "    yields. If it is nonzero, then the iterator will yield either\n",
      "    stream data or `{'timeout': True}` within the timeout period. This\n",
      "    is useful if you want your program to do other stuff in between\n",
      "    waiting for tweets.\n",
      "    \n",
      "    The `block` parameter sets the stream to be fully non-blocking. In\n",
      "    this mode, the iterator always yields immediately. It returns\n",
      "    stream data, or `None`. Note that `timeout` supercedes this\n",
      "    argument, so it should also be set `None` to use this mode.\n",
      "    \n",
      "    Twitter Response Objects\n",
      "    ------------------------\n",
      "    \n",
      "    Response from a twitter request. Behaves like a list or a string\n",
      "    (depending on requested format) but it has a few other interesting\n",
      "    attributes.\n",
      "    \n",
      "    `headers` gives you access to the response headers as an\n",
      "    httplib.HTTPHeaders instance. You can do\n",
      "    `response.headers.get('h')` to retrieve a header.\n",
      "    \n",
      "    Authentication\n",
      "    --------------\n",
      "    \n",
      "    You can authenticate with Twitter in three ways: NoAuth, OAuth, or\n",
      "    OAuth2 (app-only). Get help() on these classes to learn how to use them.\n",
      "    \n",
      "    OAuth and OAuth2 are probably the most useful.\n",
      "    \n",
      "    \n",
      "    Working with OAuth\n",
      "    ------------------\n",
      "    \n",
      "    Visit the Twitter developer page and create a new application:\n",
      "    \n",
      "        https://dev.twitter.com/apps/new\n",
      "    \n",
      "    This will get you a CONSUMER_KEY and CONSUMER_SECRET.\n",
      "    \n",
      "    When users run your application they have to authenticate your app\n",
      "    with their Twitter account. A few HTTP calls to twitter are required\n",
      "    to do this. Please see the twitter.oauth_dance module to see how this\n",
      "    is done. If you are making a command-line app, you can use the\n",
      "    oauth_dance() function directly.\n",
      "    \n",
      "    Performing the \"oauth dance\" gets you an ouath token and oauth secret\n",
      "    that authenticate the user with Twitter. You should save these for\n",
      "    later so that the user doesn't have to do the oauth dance again.\n",
      "    \n",
      "    read_token_file and write_token_file are utility methods to read and\n",
      "    write OAuth token and secret key values. The values are stored as\n",
      "    strings in the file. Not terribly exciting.\n",
      "    \n",
      "    Finally, you can use the OAuth authenticator to connect to Twitter. In\n",
      "    code it all goes like this::\n",
      "    \n",
      "        from twitter import *\n",
      "    \n",
      "        MY_TWITTER_CREDS = os.path.expanduser('~/.my_app_credentials')\n",
      "        if not os.path.exists(MY_TWITTER_CREDS):\n",
      "            oauth_dance(\"My App Name\", CONSUMER_KEY, CONSUMER_SECRET,\n",
      "                        MY_TWITTER_CREDS)\n",
      "    \n",
      "        oauth_token, oauth_secret = read_token_file(MY_TWITTER_CREDS)\n",
      "    \n",
      "        twitter = Twitter(auth=OAuth(\n",
      "            oauth_token, oauth_token_secret, CONSUMER_KEY, CONSUMER_SECRET))\n",
      "    \n",
      "        # Now work with Twitter\n",
      "        twitter.statuses.update(status='Hello, world!')\n",
      "    \n",
      "    \n",
      "    Working with OAuth2\n",
      "    -------------------\n",
      "    \n",
      "    Twitter only supports the application-only flow of OAuth2 for certain\n",
      "    API endpoints. This OAuth2 authenticator only supports the application-only\n",
      "    flow right now.\n",
      "    \n",
      "    To authenticate with OAuth2, visit the Twitter developer page and create a new\n",
      "    application:\n",
      "    \n",
      "        https://dev.twitter.com/apps/new\n",
      "    \n",
      "    This will get you a CONSUMER_KEY and CONSUMER_SECRET.\n",
      "    \n",
      "    Exchange your CONSUMER_KEY and CONSUMER_SECRET for a bearer token using the\n",
      "    oauth2_dance function.\n",
      "    \n",
      "    Finally, you can use the OAuth2 authenticator and your bearer token to connect\n",
      "    to Twitter. In code it goes like this::\n",
      "    \n",
      "        twitter = Twitter(auth=OAuth2(bearer_token=BEARER_TOKEN))\n",
      "    \n",
      "        # Now work with Twitter\n",
      "        twitter.search.tweets(q='keyword')\n",
      "\n",
      "PACKAGE CONTENTS\n",
      "    ansi\n",
      "    api\n",
      "    archiver\n",
      "    auth\n",
      "    cmdline\n",
      "    follow\n",
      "    ircbot\n",
      "    logger\n",
      "    oauth\n",
      "    oauth2\n",
      "    oauth_dance\n",
      "    stream\n",
      "    stream_example\n",
      "    timezones\n",
      "    twitter_globals\n",
      "    util\n",
      "\n",
      "CLASSES\n",
      "    __builtin__.object\n",
      "        twitter.api.TwitterResponse\n",
      "    exceptions.Exception(exceptions.BaseException)\n",
      "        twitter.api.TwitterError\n",
      "            twitter.api.TwitterHTTPError\n",
      "    twitter.api.TwitterCall(__builtin__.object)\n",
      "        twitter.api.Twitter\n",
      "        twitter.stream.TwitterStream\n",
      "    twitter.auth.Auth(__builtin__.object)\n",
      "        twitter.auth.NoAuth\n",
      "        twitter.auth.UserPassAuth\n",
      "        twitter.oauth.OAuth\n",
      "        twitter.oauth2.OAuth2\n",
      "    \n",
      "    class NoAuth(Auth)\n",
      "     |  No authentication authenticator.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      NoAuth\n",
      "     |      Auth\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self)\n",
      "     |  \n",
      "     |  encode_params(self, base_url, method, params)\n",
      "     |  \n",
      "     |  generate_headers(self)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from Auth:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "    \n",
      "    class OAuth(twitter.auth.Auth)\n",
      "     |  An OAuth authenticator.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      OAuth\n",
      "     |      twitter.auth.Auth\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, token, token_secret, consumer_key, consumer_secret)\n",
      "     |      Create the authenticator. If you are in the initial stages of\n",
      "     |      the OAuth dance and don't yet have a token or token_secret,\n",
      "     |      pass empty strings for these params.\n",
      "     |  \n",
      "     |  encode_params(self, base_url, method, params)\n",
      "     |  \n",
      "     |  generate_headers(self)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from twitter.auth.Auth:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "    \n",
      "    class OAuth2(twitter.auth.Auth)\n",
      "     |  An OAuth2 application-only authenticator.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      OAuth2\n",
      "     |      twitter.auth.Auth\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, consumer_key=None, consumer_secret=None, bearer_token=None)\n",
      "     |      Create an authenticator. You can supply consumer_key and\n",
      "     |      consumer_secret if you are requesting a bearer_token. Otherwise\n",
      "     |      you must supply the bearer_token.\n",
      "     |  \n",
      "     |  encode_params(self, base_url, method, params)\n",
      "     |  \n",
      "     |  generate_headers(self)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from twitter.auth.Auth:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "    \n",
      "    class Twitter(TwitterCall)\n",
      "     |  The minimalist yet fully featured Twitter API class.\n",
      "     |  \n",
      "     |  Get RESTful data by accessing members of this class. The result\n",
      "     |  is decoded python objects (lists and dicts).\n",
      "     |  \n",
      "     |  The Twitter API is documented at:\n",
      "     |  \n",
      "     |    http://dev.twitter.com/doc\n",
      "     |  \n",
      "     |  \n",
      "     |  Examples::\n",
      "     |  \n",
      "     |      from twitter import *\n",
      "     |  \n",
      "     |      t = Twitter(\n",
      "     |          auth=OAuth(token, token_key, con_secret, con_secret_key))\n",
      "     |  \n",
      "     |      # Get your \"home\" timeline\n",
      "     |      t.statuses.home_timeline()\n",
      "     |  \n",
      "     |      # Get a particular friend's timeline\n",
      "     |      t.statuses.user_timeline(screen_name=\"billybob\")\n",
      "     |  \n",
      "     |      # to pass in GET/POST parameters, such as `count`\n",
      "     |      t.statuses.home_timeline(count=5)\n",
      "     |  \n",
      "     |      # to pass in the GET/POST parameter `id` you need to use `_id`\n",
      "     |      t.statuses.oembed(_id=1234567890)\n",
      "     |  \n",
      "     |      # Update your status\n",
      "     |      t.statuses.update(\n",
      "     |          status=\"Using @sixohsix's sweet Python Twitter Tools.\")\n",
      "     |  \n",
      "     |      # Send a direct message\n",
      "     |      t.direct_messages.new(\n",
      "     |          user=\"billybob\",\n",
      "     |          text=\"I think yer swell!\")\n",
      "     |  \n",
      "     |      # Get the members of tamtar's list \"Things That Are Rad\"\n",
      "     |      t.lists.members(owner_screen_name=\"tamtar\", slug=\"things-that-are-rad\")\n",
      "     |  \n",
      "     |      # An *optional* `_timeout` parameter can also be used for API\n",
      "     |      # calls which take much more time than normal or twitter stops\n",
      "     |      # responding for some reason:\n",
      "     |      t.users.lookup(\n",
      "     |          screen_name=','.join(A_LIST_OF_100_SCREEN_NAMES),             _timeout=1)\n",
      "     |  \n",
      "     |      # Overriding Method: GET/POST\n",
      "     |      # you should not need to use this method as this library properly\n",
      "     |      # detects whether GET or POST should be used, Nevertheless\n",
      "     |      # to force a particular method, use `_method`\n",
      "     |      t.statuses.oembed(_id=1234567890, _method='GET')\n",
      "     |  \n",
      "     |      # Send a tweet with an image included (or set your banner or logo similarily)\n",
      "     |      # by just reading your image from the web or a file in a string:\n",
      "     |      status = \"PTT &#9733;\"\n",
      "     |      with open(\"example.png\", \"rb\") as imagefile:\n",
      "     |          params = {\"media[]\": imagefile.read(), \"status\": status}\n",
      "     |      t.statuses.update_with_media(**params)\n",
      "     |  \n",
      "     |      # Or by sending a base64 encoded image:\n",
      "     |      params = {\"media[]\": base64_image, \"status\": status, \"_base64\": True}\n",
      "     |      t.statuses.update_with_media(**params)\n",
      "     |  \n",
      "     |  \n",
      "     |  Searching Twitter::\n",
      "     |  \n",
      "     |      # Search for the latest tweets about #pycon\n",
      "     |      t.search.tweets(q=\"#pycon\")\n",
      "     |  \n",
      "     |  \n",
      "     |  Using the data returned\n",
      "     |  -----------------------\n",
      "     |  \n",
      "     |  Twitter API calls return decoded JSON. This is converted into\n",
      "     |  a bunch of Python lists, dicts, ints, and strings. For example::\n",
      "     |  \n",
      "     |      x = twitter.statuses.home_timeline()\n",
      "     |  \n",
      "     |      # The first 'tweet' in the timeline\n",
      "     |      x[0]\n",
      "     |  \n",
      "     |      # The screen name of the user who wrote the first 'tweet'\n",
      "     |      x[0]['user']['screen_name']\n",
      "     |  \n",
      "     |  \n",
      "     |  Getting raw XML data\n",
      "     |  --------------------\n",
      "     |  \n",
      "     |  If you prefer to get your Twitter data in XML format, pass\n",
      "     |  format=\"xml\" to the Twitter object when you instantiate it::\n",
      "     |  \n",
      "     |      twitter = Twitter(format=\"xml\")\n",
      "     |  \n",
      "     |  The output will not be parsed in any way. It will be a raw string\n",
      "     |  of XML.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      Twitter\n",
      "     |      TwitterCall\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, format=u'json', domain=u'api.twitter.com', secure=True, auth=None, api_version=<class 'twitter.api._DEFAULT'>, retry=False)\n",
      "     |      Create a new twitter API connector.\n",
      "     |      \n",
      "     |      Pass an `auth` parameter to use the credentials of a specific\n",
      "     |      user. Generally you'll want to pass an `OAuth`\n",
      "     |      instance::\n",
      "     |      \n",
      "     |          twitter = Twitter(auth=OAuth(\n",
      "     |                  token, token_secret, consumer_key, consumer_secret))\n",
      "     |      \n",
      "     |      \n",
      "     |      `domain` lets you change the domain you are connecting. By\n",
      "     |      default it's `api.twitter.com`.\n",
      "     |      \n",
      "     |      If `secure` is False you will connect with HTTP instead of\n",
      "     |      HTTPS.\n",
      "     |      \n",
      "     |      `api_version` is used to set the base uri. By default it's\n",
      "     |      '1.1'.\n",
      "     |      \n",
      "     |      If `retry` is True, API rate limits will automatically be\n",
      "     |      handled by waiting until the next reset, as indicated by\n",
      "     |      the X-Rate-Limit-Reset HTTP header. If retry is an integer,\n",
      "     |      it defines the number of retries attempted.\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Methods inherited from TwitterCall:\n",
      "     |  \n",
      "     |  __call__(self, **kwargs)\n",
      "     |  \n",
      "     |  __getattr__(self, k)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from TwitterCall:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data and other attributes inherited from TwitterCall:\n",
      "     |  \n",
      "     |  TWITTER_UNAVAILABLE_WAIT = 30\n",
      "    \n",
      "    class TwitterError(exceptions.Exception)\n",
      "     |  Base Exception thrown by the Twitter object when there is a\n",
      "     |  general error interacting with the API.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      TwitterError\n",
      "     |      exceptions.Exception\n",
      "     |      exceptions.BaseException\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Data descriptors defined here:\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Methods inherited from exceptions.Exception:\n",
      "     |  \n",
      "     |  __init__(...)\n",
      "     |      x.__init__(...) initializes x; see help(type(x)) for signature\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data and other attributes inherited from exceptions.Exception:\n",
      "     |  \n",
      "     |  __new__ = <built-in method __new__ of type object>\n",
      "     |      T.__new__(S, ...) -> a new object with type S, a subtype of T\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Methods inherited from exceptions.BaseException:\n",
      "     |  \n",
      "     |  __delattr__(...)\n",
      "     |      x.__delattr__('name') <==> del x.name\n",
      "     |  \n",
      "     |  __getattribute__(...)\n",
      "     |      x.__getattribute__('name') <==> x.name\n",
      "     |  \n",
      "     |  __getitem__(...)\n",
      "     |      x.__getitem__(y) <==> x[y]\n",
      "     |  \n",
      "     |  __getslice__(...)\n",
      "     |      x.__getslice__(i, j) <==> x[i:j]\n",
      "     |      \n",
      "     |      Use of negative indices is not supported.\n",
      "     |  \n",
      "     |  __reduce__(...)\n",
      "     |  \n",
      "     |  __repr__(...)\n",
      "     |      x.__repr__() <==> repr(x)\n",
      "     |  \n",
      "     |  __setattr__(...)\n",
      "     |      x.__setattr__('name', value) <==> x.name = value\n",
      "     |  \n",
      "     |  __setstate__(...)\n",
      "     |  \n",
      "     |  __str__(...)\n",
      "     |      x.__str__() <==> str(x)\n",
      "     |  \n",
      "     |  __unicode__(...)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from exceptions.BaseException:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |  \n",
      "     |  args\n",
      "     |  \n",
      "     |  message\n",
      "    \n",
      "    class TwitterHTTPError(TwitterError)\n",
      "     |  Exception thrown by the Twitter object when there is an\n",
      "     |  HTTP error interacting with twitter.com.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      TwitterHTTPError\n",
      "     |      TwitterError\n",
      "     |      exceptions.Exception\n",
      "     |      exceptions.BaseException\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, e, uri, format, uriparts)\n",
      "     |  \n",
      "     |  __str__(self)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from TwitterError:\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data and other attributes inherited from exceptions.Exception:\n",
      "     |  \n",
      "     |  __new__ = <built-in method __new__ of type object>\n",
      "     |      T.__new__(S, ...) -> a new object with type S, a subtype of T\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Methods inherited from exceptions.BaseException:\n",
      "     |  \n",
      "     |  __delattr__(...)\n",
      "     |      x.__delattr__('name') <==> del x.name\n",
      "     |  \n",
      "     |  __getattribute__(...)\n",
      "     |      x.__getattribute__('name') <==> x.name\n",
      "     |  \n",
      "     |  __getitem__(...)\n",
      "     |      x.__getitem__(y) <==> x[y]\n",
      "     |  \n",
      "     |  __getslice__(...)\n",
      "     |      x.__getslice__(i, j) <==> x[i:j]\n",
      "     |      \n",
      "     |      Use of negative indices is not supported.\n",
      "     |  \n",
      "     |  __reduce__(...)\n",
      "     |  \n",
      "     |  __repr__(...)\n",
      "     |      x.__repr__() <==> repr(x)\n",
      "     |  \n",
      "     |  __setattr__(...)\n",
      "     |      x.__setattr__('name', value) <==> x.name = value\n",
      "     |  \n",
      "     |  __setstate__(...)\n",
      "     |  \n",
      "     |  __unicode__(...)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from exceptions.BaseException:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |  \n",
      "     |  args\n",
      "     |  \n",
      "     |  message\n",
      "    \n",
      "    class TwitterResponse(__builtin__.object)\n",
      "     |  Response from a twitter request. Behaves like a list or a string\n",
      "     |  (depending on requested format) but it has a few other interesting\n",
      "     |  attributes.\n",
      "     |  \n",
      "     |  `headers` gives you access to the response headers as an\n",
      "     |  httplib.HTTPHeaders instance. You can do\n",
      "     |  `response.headers.get('h')` to retrieve a header.\n",
      "     |  \n",
      "     |  Data descriptors defined here:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "     |  \n",
      "     |  rate_limit_limit\n",
      "     |      The rate limit ceiling for that given request.\n",
      "     |  \n",
      "     |  rate_limit_remaining\n",
      "     |      Remaining requests in the current rate-limit.\n",
      "     |  \n",
      "     |  rate_limit_reset\n",
      "     |      Time in UTC epoch seconds when the rate limit will reset.\n",
      "    \n",
      "    class TwitterStream(twitter.api.TwitterCall)\n",
      "     |  The TwitterStream object is an interface to the Twitter Stream\n",
      "     |  API. This can be used pretty much the same as the Twitter class\n",
      "     |  except the result of calling a method will be an iterator that\n",
      "     |  yields objects decoded from the stream. For example::\n",
      "     |  \n",
      "     |      twitter_stream = TwitterStream(auth=OAuth(...))\n",
      "     |      iterator = twitter_stream.statuses.sample()\n",
      "     |  \n",
      "     |      for tweet in iterator:\n",
      "     |          # ...do something with this tweet...\n",
      "     |  \n",
      "     |  Per default the ``TwitterStream`` object uses\n",
      "     |  [public streams](https://dev.twitter.com/docs/streaming-apis/streams/public).\n",
      "     |  If you want to use one of the other\n",
      "     |  [streaming APIs](https://dev.twitter.com/docs/streaming-apis), specify the URL\n",
      "     |  manually:\n",
      "     |  \n",
      "     |  - [Public streams](https://dev.twitter.com/docs/streaming-apis/streams/public): stream.twitter.com\n",
      "     |  - [User streams](https://dev.twitter.com/docs/streaming-apis/streams/user): userstream.twitter.com\n",
      "     |  - [Site streams](https://dev.twitter.com/docs/streaming-apis/streams/site): sitestream.twitter.com\n",
      "     |  \n",
      "     |  Note that you require the proper\n",
      "     |  [permissions](https://dev.twitter.com/docs/application-permission-model) to\n",
      "     |  access these streams. E.g. for direct messages your\n",
      "     |  [application](https://dev.twitter.com/apps) needs the \"Read, Write & Direct\n",
      "     |  Messages\" permission.\n",
      "     |  \n",
      "     |  The following example demonstrates how to retrieve all new direct messages\n",
      "     |  from the user stream::\n",
      "     |  \n",
      "     |      auth = OAuth(\n",
      "     |          consumer_key='[your consumer key]',\n",
      "     |          consumer_secret='[your consumer secret]',\n",
      "     |          token='[your token]',\n",
      "     |          token_secret='[your token secret]'\n",
      "     |      )\n",
      "     |      twitter_userstream = TwitterStream(auth=auth, domain='userstream.twitter.com')\n",
      "     |      for msg in twitter_userstream.user():\n",
      "     |          if 'direct_message' in msg:\n",
      "     |              print msg['direct_message']['text']\n",
      "     |  \n",
      "     |  The iterator will yield until the TCP connection breaks. When the\n",
      "     |  connection breaks, the iterator yields `{'hangup': True}`, and\n",
      "     |  raises `StopIteration` if iterated again.\n",
      "     |  \n",
      "     |  Similarly, if the stream does not produce heartbeats for more than\n",
      "     |  90 seconds, the iterator yields `{'hangup': True,\n",
      "     |  'heartbeat_timeout': True}`, and raises `StopIteration` if\n",
      "     |  iterated again.\n",
      "     |  \n",
      "     |  The `timeout` parameter controls the maximum time between\n",
      "     |  yields. If it is nonzero, then the iterator will yield either\n",
      "     |  stream data or `{'timeout': True}` within the timeout period. This\n",
      "     |  is useful if you want your program to do other stuff in between\n",
      "     |  waiting for tweets.\n",
      "     |  \n",
      "     |  The `block` parameter sets the stream to be fully non-blocking. In\n",
      "     |  this mode, the iterator always yields immediately. It returns\n",
      "     |  stream data, or `None`. Note that `timeout` supercedes this\n",
      "     |  argument, so it should also be set `None` to use this mode.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      TwitterStream\n",
      "     |      twitter.api.TwitterCall\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, domain=u'stream.twitter.com', secure=True, auth=None, api_version=u'1.1', block=True, timeout=None, heartbeat_timeout=90.0)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Methods inherited from twitter.api.TwitterCall:\n",
      "     |  \n",
      "     |  __call__(self, **kwargs)\n",
      "     |  \n",
      "     |  __getattr__(self, k)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from twitter.api.TwitterCall:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data and other attributes inherited from twitter.api.TwitterCall:\n",
      "     |  \n",
      "     |  TWITTER_UNAVAILABLE_WAIT = 30\n",
      "    \n",
      "    class UserPassAuth(Auth)\n",
      "     |  Basic auth authentication using email/username and\n",
      "     |  password. Deprecated.\n",
      "     |  \n",
      "     |  Method resolution order:\n",
      "     |      UserPassAuth\n",
      "     |      Auth\n",
      "     |      __builtin__.object\n",
      "     |  \n",
      "     |  Methods defined here:\n",
      "     |  \n",
      "     |  __init__(self, username, password)\n",
      "     |  \n",
      "     |  encode_params(self, base_url, method, params)\n",
      "     |  \n",
      "     |  generate_headers(self)\n",
      "     |  \n",
      "     |  ----------------------------------------------------------------------\n",
      "     |  Data descriptors inherited from Auth:\n",
      "     |  \n",
      "     |  __dict__\n",
      "     |      dictionary for instance variables (if defined)\n",
      "     |  \n",
      "     |  __weakref__\n",
      "     |      list of weak references to the object (if defined)\n",
      "\n",
      "FUNCTIONS\n",
      "    oauth2_dance(consumer_key, consumer_secret, token_filename=None)\n",
      "        Perform the OAuth2 dance to transform a consumer key and secret into a\n",
      "        bearer token.\n",
      "        \n",
      "        If a token_filename is given, the bearer token will be written to\n",
      "        the file.\n",
      "    \n",
      "    oauth_dance(app_name, consumer_key, consumer_secret, token_filename=None)\n",
      "        Perform the OAuth dance with some command-line prompts. Return the\n",
      "        oauth_token and oauth_token_secret.\n",
      "        \n",
      "        Provide the name of your app in `app_name`, your consumer_key, and\n",
      "        consumer_secret. This function will open a web browser to let the\n",
      "        user allow your app to access their Twitter account. PIN\n",
      "        authentication is used.\n",
      "        \n",
      "        If a token_filename is given, the oauth tokens will be written to\n",
      "        the file.\n",
      "    \n",
      "    read_bearer_token_file(filename)\n",
      "        Read a token file and return the oauth2 bearer token.\n",
      "    \n",
      "    read_token_file(filename)\n",
      "        Read a token file and return the oauth token and oauth token secret.\n",
      "    \n",
      "    write_bearer_token_file(filename, oauth2_bearer_token)\n",
      "        Write a token file to hold the oauth2 bearer token.\n",
      "    \n",
      "    write_token_file(filename, oauth_token, oauth_token_secret)\n",
      "        Write a token file to hold the oauth token and oauth token secret.\n",
      "\n",
      "DATA\n",
      "    __all__ = ['NoAuth', 'OAuth', 'OAuth2', 'oauth2_dance', 'oauth_dance',...\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We can get some help on how to use the twitter api with the following. \n",
    "help(twitter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-5-a5e148cb616b>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-5-a5e148cb616b>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    Go ahead and take a look at the [twitter docs] (https://dev.twitter.com/overview/documentation).\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "\n",
    "Go ahead and take a look at the [twitter docs] (https://dev.twitter.com/overview/documentation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{u'created_at': u'2015-09-29T15:06:01Z', u'trends': [{u'url': u'http://twitter.com/search?q=%23NationalCoffeeDay', u'query': u'%23NationalCoffeeDay', u'name': u'#NationalCoffeeDay', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23%D8%A7%D8%B3%D9%85_%D8%AD%D9%84%D9%88_%D9%85%D9%86_%D8%A7%D8%B1%D8%A8%D8%B9_%D8%AD%D8%B1%D9%88%D9%81', u'query': u'%23%D8%A7%D8%B3%D9%85_%D8%AD%D9%84%D9%88_%D9%85%D9%86_%D8%A7%D8%B1%D8%A8%D8%B9_%D8%AD%D8%B1%D9%88%D9%81', u'name': u'#\\u0627\\u0633\\u0645_\\u062d\\u0644\\u0648_\\u0645\\u0646_\\u0627\\u0631\\u0628\\u0639_\\u062d\\u0631\\u0648\\u0641', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%EC%96%B4%EA%B2%8C%EC%9D%B8', u'query': u'%EC%96%B4%EA%B2%8C%EC%9D%B8', u'name': u'\\uc5b4\\uac8c\\uc778', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23%EB%A9%98%EC%85%98%EB%B0%9B%EC%9D%80_%EA%B2%83%EC%9D%98_%ED%83%915_%EB%A7%90%ED%95%B4%EB%B3%B4%EA%B8%B0', u'query': u'%23%EB%A9%98%EC%85%98%EB%B0%9B%EC%9D%80_%EA%B2%83%EC%9D%98_%ED%83%915_%EB%A7%90%ED%95%B4%EB%B3%B4%EA%B8%B0', u'name': u'#\\uba58\\uc158\\ubc1b\\uc740_\\uac83\\uc758_\\ud0d15_\\ub9d0\\ud574\\ubcf4\\uae30', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23OTWOLChanges', u'query': u'%23OTWOLChanges', u'name': u'#OTWOLChanges', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23FelizMartes', u'query': u'%23FelizMartes', u'name': u'#FelizMartes', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Jack+Warner%22', u'query': u'%22Jack+Warner%22', u'name': u'Jack Warner', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Larry+Brown%22', u'query': u'%22Larry+Brown%22', u'name': u'Larry Brown', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22The+Revenant%22', u'query': u'%22The+Revenant%22', u'name': u'The Revenant', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22D%C3%ADa+Internacional+del+Caf%C3%A9%22', u'query': u'%22D%C3%ADa+Internacional+del+Caf%C3%A9%22', u'name': u'D\\xeda Internacional del Caf\\xe9', u'promoted_content': None}], u'as_of': u'2015-09-29T15:11:20Z', u'locations': [{u'woeid': 1, u'name': u'Worldwide'}]}]\n",
      "\n",
      "[{u'created_at': u'2015-09-29T15:06:01Z', u'trends': [{u'url': u'http://twitter.com/search?q=%23NationalCoffeeDay', u'query': u'%23NationalCoffeeDay', u'name': u'#NationalCoffeeDay', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23PinkOut', u'query': u'%23PinkOut', u'name': u'#PinkOut', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Larry+Brown%22', u'query': u'%22Larry+Brown%22', u'name': u'Larry Brown', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23HappyBirthdayHalsey', u'query': u'%23HappyBirthdayHalsey', u'name': u'#HappyBirthdayHalsey', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23IfGovtShutsCongressWill', u'query': u'%23IfGovtShutsCongressWill', u'name': u'#IfGovtShutsCongressWill', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=MacArthur', u'query': u'MacArthur', u'name': u'MacArthur', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%23TravelTuesday', u'query': u'%23TravelTuesday', u'name': u'#TravelTuesday', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Wes+Welker%22', u'query': u'%22Wes+Welker%22', u'name': u'Wes Welker', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Business+Insider%22', u'query': u'%22Business+Insider%22', u'name': u'Business Insider', u'promoted_content': None}, {u'url': u'http://twitter.com/search?q=%22Jack+Warner%22', u'query': u'%22Jack+Warner%22', u'name': u'Jack Warner', u'promoted_content': None}], u'as_of': u'2015-09-29T15:11:20Z', u'locations': [{u'woeid': 23424977, u'name': u'United States'}]}]\n"
     ]
    }
   ],
   "source": [
    "# The Yahoo! Where On Earth ID for the entire world is 1.\n",
    "# See https://dev.twitter.com/docs/api/1.1/get/trends/place and\n",
    "# http://developer.yahoo.com/geo/geoplanet/\n",
    "\n",
    "WORLD_WOE_ID = 1\n",
    "US_WOE_ID = 23424977\n",
    "\n",
    "# Prefix ID with the underscore for query string parameterization.\n",
    "# Without the underscore, the twitter package appends the ID value\n",
    "# to the URL itself as a special case keyword argument.\n",
    "\n",
    "world_trends = twitter_api.trends.place(_id=WORLD_WOE_ID)\n",
    "us_trends = twitter_api.trends.place(_id=US_WOE_ID)\n",
    "\n",
    "print world_trends\n",
    "print\n",
    "print us_trends"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3. Displaying API responses as pretty-printed JSON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      " {\n",
      "  \"created_at\": \"2015-09-29T15:06:01Z\", \n",
      "  \"trends\": [\n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23NationalCoffeeDay\", \n",
      "    \"query\": \"%23NationalCoffeeDay\", \n",
      "    \"name\": \"#NationalCoffeeDay\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23%D8%A7%D8%B3%D9%85_%D8%AD%D9%84%D9%88_%D9%85%D9%86_%D8%A7%D8%B1%D8%A8%D8%B9_%D8%AD%D8%B1%D9%88%D9%81\", \n",
      "    \"query\": \"%23%D8%A7%D8%B3%D9%85_%D8%AD%D9%84%D9%88_%D9%85%D9%86_%D8%A7%D8%B1%D8%A8%D8%B9_%D8%AD%D8%B1%D9%88%D9%81\", \n",
      "    \"name\": \"#\\u0627\\u0633\\u0645_\\u062d\\u0644\\u0648_\\u0645\\u0646_\\u0627\\u0631\\u0628\\u0639_\\u062d\\u0631\\u0648\\u0641\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%EC%96%B4%EA%B2%8C%EC%9D%B8\", \n",
      "    \"query\": \"%EC%96%B4%EA%B2%8C%EC%9D%B8\", \n",
      "    \"name\": \"\\uc5b4\\uac8c\\uc778\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23%EB%A9%98%EC%85%98%EB%B0%9B%EC%9D%80_%EA%B2%83%EC%9D%98_%ED%83%915_%EB%A7%90%ED%95%B4%EB%B3%B4%EA%B8%B0\", \n",
      "    \"query\": \"%23%EB%A9%98%EC%85%98%EB%B0%9B%EC%9D%80_%EA%B2%83%EC%9D%98_%ED%83%915_%EB%A7%90%ED%95%B4%EB%B3%B4%EA%B8%B0\", \n",
      "    \"name\": \"#\\uba58\\uc158\\ubc1b\\uc740_\\uac83\\uc758_\\ud0d15_\\ub9d0\\ud574\\ubcf4\\uae30\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23OTWOLChanges\", \n",
      "    \"query\": \"%23OTWOLChanges\", \n",
      "    \"name\": \"#OTWOLChanges\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23FelizMartes\", \n",
      "    \"query\": \"%23FelizMartes\", \n",
      "    \"name\": \"#FelizMartes\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Jack+Warner%22\", \n",
      "    \"query\": \"%22Jack+Warner%22\", \n",
      "    \"name\": \"Jack Warner\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Larry+Brown%22\", \n",
      "    \"query\": \"%22Larry+Brown%22\", \n",
      "    \"name\": \"Larry Brown\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22The+Revenant%22\", \n",
      "    \"query\": \"%22The+Revenant%22\", \n",
      "    \"name\": \"The Revenant\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22D%C3%ADa+Internacional+del+Caf%C3%A9%22\", \n",
      "    \"query\": \"%22D%C3%ADa+Internacional+del+Caf%C3%A9%22\", \n",
      "    \"name\": \"D\\u00eda Internacional del Caf\\u00e9\", \n",
      "    \"promoted_content\": null\n",
      "   }\n",
      "  ], \n",
      "  \"as_of\": \"2015-09-29T15:11:20Z\", \n",
      "  \"locations\": [\n",
      "   {\n",
      "    \"woeid\": 1, \n",
      "    \"name\": \"Worldwide\"\n",
      "   }\n",
      "  ]\n",
      " }\n",
      "]\n",
      "\n",
      "[\n",
      " {\n",
      "  \"created_at\": \"2015-09-29T15:06:01Z\", \n",
      "  \"trends\": [\n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23NationalCoffeeDay\", \n",
      "    \"query\": \"%23NationalCoffeeDay\", \n",
      "    \"name\": \"#NationalCoffeeDay\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23PinkOut\", \n",
      "    \"query\": \"%23PinkOut\", \n",
      "    \"name\": \"#PinkOut\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Larry+Brown%22\", \n",
      "    \"query\": \"%22Larry+Brown%22\", \n",
      "    \"name\": \"Larry Brown\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23HappyBirthdayHalsey\", \n",
      "    \"query\": \"%23HappyBirthdayHalsey\", \n",
      "    \"name\": \"#HappyBirthdayHalsey\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23IfGovtShutsCongressWill\", \n",
      "    \"query\": \"%23IfGovtShutsCongressWill\", \n",
      "    \"name\": \"#IfGovtShutsCongressWill\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=MacArthur\", \n",
      "    \"query\": \"MacArthur\", \n",
      "    \"name\": \"MacArthur\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%23TravelTuesday\", \n",
      "    \"query\": \"%23TravelTuesday\", \n",
      "    \"name\": \"#TravelTuesday\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Wes+Welker%22\", \n",
      "    \"query\": \"%22Wes+Welker%22\", \n",
      "    \"name\": \"Wes Welker\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Business+Insider%22\", \n",
      "    \"query\": \"%22Business+Insider%22\", \n",
      "    \"name\": \"Business Insider\", \n",
      "    \"promoted_content\": null\n",
      "   }, \n",
      "   {\n",
      "    \"url\": \"http://twitter.com/search?q=%22Jack+Warner%22\", \n",
      "    \"query\": \"%22Jack+Warner%22\", \n",
      "    \"name\": \"Jack Warner\", \n",
      "    \"promoted_content\": null\n",
      "   }\n",
      "  ], \n",
      "  \"as_of\": \"2015-09-29T15:11:20Z\", \n",
      "  \"locations\": [\n",
      "   {\n",
      "    \"woeid\": 23424977, \n",
      "    \"name\": \"United States\"\n",
      "   }\n",
      "  ]\n",
      " }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "print json.dumps(world_trends, indent=1)\n",
    "print\n",
    "print json.dumps(us_trends, indent=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a look at the [api docs](https://dev.twitter.com/rest/reference/get/trends/place) for the /trends/place call made above. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4. Collecting search results for a targeted hashtag."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of statuses 100\n",
      "next_results ?max_id=648874881132589055&q=%23analytics&count=100&include_entities=1\n",
      "{u'q': u'#analytics', u'count': u'100', u'include_entities': u'1', u'max_id': u'648874881132589055'}\n",
      "Length of statuses 200\n",
      "next_results ?max_id=648872172237266943&q=%23analytics&count=100&include_entities=1\n",
      "{u'q': u'#analytics', u'count': u'100', u'include_entities': u'1', u'max_id': u'648872172237266943'}\n",
      "Length of statuses 300\n",
      "next_results ?max_id=648867796655427583&q=%23analytics&count=100&include_entities=1\n",
      "{u'q': u'#analytics', u'count': u'100', u'include_entities': u'1', u'max_id': u'648867796655427583'}\n",
      "Length of statuses 400\n",
      "next_results ?max_id=648864104917155840&q=%23analytics&count=100&include_entities=1\n",
      "{u'q': u'#analytics', u'count': u'100', u'include_entities': u'1', u'max_id': u'648864104917155840'}\n",
      "Length of statuses 500\n",
      "next_results ?max_id=648861198994292735&q=%23analytics&count=100&include_entities=1\n",
      "{u'q': u'#analytics', u'count': u'100', u'include_entities': u'1', u'max_id': u'648861198994292735'}\n"
     ]
    }
   ],
   "source": [
    "# Import unquote to prevent url encoding errors in next_results\n",
    "from urllib import unquote\n",
    "\n",
    "#This can be any trending topic, but let's focus on a hashtag that is relevant to the class. \n",
    "q = '#analytics' \n",
    "\n",
    "count = 100\n",
    "\n",
    "# See https://dev.twitter.com/rest/reference/get/search/tweets\n",
    "search_results = twitter_api.search.tweets(q=q, count=count)\n",
    "\n",
    "#This selects out \n",
    "statuses = search_results['statuses']\n",
    "\n",
    "\n",
    "# Iterate through 5 more batches of results by following the cursor\n",
    "for _ in range(5):\n",
    "    print \"Length of statuses\", len(statuses)\n",
    "    try:\n",
    "        next_results = search_results['search_metadata']['next_results']\n",
    "        print \"next_results\", next_results\n",
    "    except KeyError, e: # No more results when next_results doesn't exist\n",
    "        break\n",
    "        \n",
    "    # Create a dictionary from next_results, which has the following form:\n",
    "    # ?max_id=313519052523986943&q=NCAA&include_entities=1\n",
    "    kwargs = dict([ kv.split('=') for kv in unquote(next_results[1:]).split(\"&\") ])\n",
    "    print kwargs\n",
    "    search_results = twitter_api.search.tweets(**kwargs)\n",
    "    statuses += search_results['statuses']\n",
    "\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      " {\n",
      "  \"contributors\": null, \n",
      "  \"truncated\": false, \n",
      "  \"text\": \"u_t=10x^2u_xx+(10x + 4t)u_x+-2u with u(x,s)=cos(1*x^4+8)\\n http://t.co/rrFFceh1Xw #bigdata #analytics http://t.co/7sIsvxCg3K\", \n",
      "  \"is_quote_status\": false, \n",
      "  \"in_reply_to_status_id\": null, \n",
      "  \"id\": 648877692603895809, \n",
      "  \"favorite_count\": 0, \n",
      "  \"source\": \"<a href=\\\"http://www.pdeweb.com\\\" rel=\\\"nofollow\\\">PDEWEBBot</a>\", \n",
      "  \"retweeted\": false, \n",
      "  \"coordinates\": null, \n",
      "  \"entities\": {\n",
      "   \"symbols\": [], \n",
      "   \"user_mentions\": [], \n",
      "   \"hashtags\": [\n",
      "    {\n",
      "     \"indices\": [\n",
      "      81, \n",
      "      89\n",
      "     ], \n",
      "     \"text\": \"bigdata\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      90, \n",
      "      100\n",
      "     ], \n",
      "     \"text\": \"analytics\"\n",
      "    }\n",
      "   ], \n",
      "   \"urls\": [\n",
      "    {\n",
      "     \"url\": \"http://t.co/rrFFceh1Xw\", \n",
      "     \"indices\": [\n",
      "      58, \n",
      "      80\n",
      "     ], \n",
      "     \"expanded_url\": \"http://www.pdeweb.com/\", \n",
      "     \"display_url\": \"pdeweb.com\"\n",
      "    }\n",
      "   ], \n",
      "   \"media\": [\n",
      "    {\n",
      "     \"expanded_url\": \"http://twitter.com/PDEWEB/status/648877692603895809/photo/1\", \n",
      "     \"display_url\": \"pic.twitter.com/7sIsvxCg3K\", \n",
      "     \"url\": \"http://t.co/7sIsvxCg3K\", \n",
      "     \"media_url_https\": \"https://pbs.twimg.com/media/CQFG0mVUwAEeknN.png\", \n",
      "     \"id_str\": \"648877690775191553\", \n",
      "     \"sizes\": {\n",
      "      \"large\": {\n",
      "       \"h\": 417, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 408\n",
      "      }, \n",
      "      \"small\": {\n",
      "       \"h\": 347, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 340\n",
      "      }, \n",
      "      \"medium\": {\n",
      "       \"h\": 417, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 408\n",
      "      }, \n",
      "      \"thumb\": {\n",
      "       \"h\": 150, \n",
      "       \"resize\": \"crop\", \n",
      "       \"w\": 150\n",
      "      }\n",
      "     }, \n",
      "     \"indices\": [\n",
      "      101, \n",
      "      123\n",
      "     ], \n",
      "     \"type\": \"photo\", \n",
      "     \"id\": 648877690775191553, \n",
      "     \"media_url\": \"http://pbs.twimg.com/media/CQFG0mVUwAEeknN.png\"\n",
      "    }\n",
      "   ]\n",
      "  }, \n",
      "  \"in_reply_to_screen_name\": null, \n",
      "  \"in_reply_to_user_id\": null, \n",
      "  \"retweet_count\": 0, \n",
      "  \"id_str\": \"648877692603895809\", \n",
      "  \"favorited\": false, \n",
      "  \"user\": {\n",
      "   \"follow_request_sent\": false, \n",
      "   \"has_extended_profile\": false, \n",
      "   \"profile_use_background_image\": false, \n",
      "   \"default_profile_image\": false, \n",
      "   \"id\": 2900173115, \n",
      "   \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"verified\": false, \n",
      "   \"profile_text_color\": \"000000\", \n",
      "   \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/542537921740292097/F4sy4DCe_normal.jpeg\", \n",
      "   \"profile_sidebar_fill_color\": \"000000\", \n",
      "   \"entities\": {\n",
      "    \"url\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"http://t.co/Z11yFp4cnL\", \n",
      "       \"indices\": [\n",
      "        0, \n",
      "        22\n",
      "       ], \n",
      "       \"expanded_url\": \"http://www.pdeweb.com\", \n",
      "       \"display_url\": \"pdeweb.com\"\n",
      "      }\n",
      "     ]\n",
      "    }, \n",
      "    \"description\": {\n",
      "     \"urls\": []\n",
      "    }\n",
      "   }, \n",
      "   \"followers_count\": 692, \n",
      "   \"profile_sidebar_border_color\": \"000000\", \n",
      "   \"id_str\": \"2900173115\", \n",
      "   \"profile_background_color\": \"000000\", \n",
      "   \"listed_count\": 87, \n",
      "   \"is_translation_enabled\": false, \n",
      "   \"utc_offset\": null, \n",
      "   \"statuses_count\": 11247, \n",
      "   \"description\": \"Partial Differential Equations Web Application\", \n",
      "   \"friends_count\": 1124, \n",
      "   \"location\": \"\", \n",
      "   \"profile_link_color\": \"89C9FA\", \n",
      "   \"profile_image_url\": \"http://pbs.twimg.com/profile_images/542537921740292097/F4sy4DCe_normal.jpeg\", \n",
      "   \"following\": false, \n",
      "   \"geo_enabled\": false, \n",
      "   \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"screen_name\": \"PDEWEB\", \n",
      "   \"lang\": \"en\", \n",
      "   \"profile_background_tile\": false, \n",
      "   \"favourites_count\": 54, \n",
      "   \"name\": \"PDEWEB\", \n",
      "   \"notifications\": false, \n",
      "   \"url\": \"http://t.co/Z11yFp4cnL\", \n",
      "   \"created_at\": \"Mon Dec 01 04:42:44 +0000 2014\", \n",
      "   \"contributors_enabled\": false, \n",
      "   \"time_zone\": null, \n",
      "   \"protected\": false, \n",
      "   \"default_profile\": false, \n",
      "   \"is_translator\": false\n",
      "  }, \n",
      "  \"geo\": null, \n",
      "  \"in_reply_to_user_id_str\": null, \n",
      "  \"possibly_sensitive\": false, \n",
      "  \"lang\": \"en\", \n",
      "  \"created_at\": \"Tue Sep 29 15:11:12 +0000 2015\", \n",
      "  \"in_reply_to_status_id_str\": null, \n",
      "  \"place\": null, \n",
      "  \"metadata\": {\n",
      "   \"iso_language_code\": \"en\", \n",
      "   \"result_type\": \"recent\"\n",
      "  }\n",
      " }, \n",
      " {\n",
      "  \"contributors\": null, \n",
      "  \"truncated\": false, \n",
      "  \"text\": \"How Google Understands You [Infographic] http://t.co/PnlBUM7tKv #infographic #bigdata #search #analytics\", \n",
      "  \"is_quote_status\": false, \n",
      "  \"in_reply_to_status_id\": null, \n",
      "  \"id\": 648877653471199232, \n",
      "  \"favorite_count\": 0, \n",
      "  \"source\": \"<a href=\\\"http://pxl.me\\\" rel=\\\"nofollow\\\">PxlMeApp</a>\", \n",
      "  \"retweeted\": false, \n",
      "  \"coordinates\": null, \n",
      "  \"entities\": {\n",
      "   \"symbols\": [], \n",
      "   \"user_mentions\": [], \n",
      "   \"hashtags\": [\n",
      "    {\n",
      "     \"indices\": [\n",
      "      64, \n",
      "      76\n",
      "     ], \n",
      "     \"text\": \"infographic\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      77, \n",
      "      85\n",
      "     ], \n",
      "     \"text\": \"bigdata\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      86, \n",
      "      93\n",
      "     ], \n",
      "     \"text\": \"search\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      94, \n",
      "      104\n",
      "     ], \n",
      "     \"text\": \"analytics\"\n",
      "    }\n",
      "   ], \n",
      "   \"urls\": [\n",
      "    {\n",
      "     \"url\": \"http://t.co/PnlBUM7tKv\", \n",
      "     \"indices\": [\n",
      "      41, \n",
      "      63\n",
      "     ], \n",
      "     \"expanded_url\": \"http://bit.ly/10S3GjT\", \n",
      "     \"display_url\": \"bit.ly/10S3GjT\"\n",
      "    }\n",
      "   ]\n",
      "  }, \n",
      "  \"in_reply_to_screen_name\": null, \n",
      "  \"in_reply_to_user_id\": null, \n",
      "  \"retweet_count\": 0, \n",
      "  \"id_str\": \"648877653471199232\", \n",
      "  \"favorited\": false, \n",
      "  \"user\": {\n",
      "   \"follow_request_sent\": false, \n",
      "   \"has_extended_profile\": false, \n",
      "   \"profile_use_background_image\": true, \n",
      "   \"default_profile_image\": false, \n",
      "   \"id\": 522544821, \n",
      "   \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"verified\": false, \n",
      "   \"profile_text_color\": \"333333\", \n",
      "   \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/1896670929/myrl_logo_sq_normal.png\", \n",
      "   \"profile_sidebar_fill_color\": \"DDEEF6\", \n",
      "   \"entities\": {\n",
      "    \"url\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"http://t.co/w2siqDB0ct\", \n",
      "       \"indices\": [\n",
      "        0, \n",
      "        22\n",
      "       ], \n",
      "       \"expanded_url\": \"http://MyRL.co\", \n",
      "       \"display_url\": \"MyRL.co\"\n",
      "      }\n",
      "     ]\n",
      "    }, \n",
      "    \"description\": {\n",
      "     \"urls\": []\n",
      "    }\n",
      "   }, \n",
      "   \"followers_count\": 4768, \n",
      "   \"profile_sidebar_border_color\": \"C0DEED\", \n",
      "   \"id_str\": \"522544821\", \n",
      "   \"profile_background_color\": \"C0DEED\", \n",
      "   \"listed_count\": 195, \n",
      "   \"is_translation_enabled\": false, \n",
      "   \"utc_offset\": -10800, \n",
      "   \"statuses_count\": 18547, \n",
      "   \"description\": \"#PreLaunch, Claim you #permanent #WebLink now, #ComingSoon, your own resource locator. #PreSignup #NOW\", \n",
      "   \"friends_count\": 4162, \n",
      "   \"location\": \"MyRL WWW\", \n",
      "   \"profile_link_color\": \"0084B4\", \n",
      "   \"profile_image_url\": \"http://pbs.twimg.com/profile_images/1896670929/myrl_logo_sq_normal.png\", \n",
      "   \"following\": false, \n",
      "   \"geo_enabled\": false, \n",
      "   \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"screen_name\": \"MyResLoc\", \n",
      "   \"lang\": \"en\", \n",
      "   \"profile_background_tile\": false, \n",
      "   \"favourites_count\": 0, \n",
      "   \"name\": \"My Resource Locator\", \n",
      "   \"notifications\": false, \n",
      "   \"url\": \"http://t.co/w2siqDB0ct\", \n",
      "   \"created_at\": \"Mon Mar 12 20:09:20 +0000 2012\", \n",
      "   \"contributors_enabled\": false, \n",
      "   \"time_zone\": \"Atlantic Time (Canada)\", \n",
      "   \"protected\": false, \n",
      "   \"default_profile\": true, \n",
      "   \"is_translator\": false\n",
      "  }, \n",
      "  \"geo\": null, \n",
      "  \"in_reply_to_user_id_str\": null, \n",
      "  \"possibly_sensitive\": false, \n",
      "  \"lang\": \"en\", \n",
      "  \"created_at\": \"Tue Sep 29 15:11:02 +0000 2015\", \n",
      "  \"in_reply_to_status_id_str\": null, \n",
      "  \"place\": null, \n",
      "  \"metadata\": {\n",
      "   \"iso_language_code\": \"en\", \n",
      "   \"result_type\": \"recent\"\n",
      "  }\n",
      " }, \n",
      " {\n",
      "  \"contributors\": null, \n",
      "  \"truncated\": false, \n",
      "  \"text\": \"Tendencias de #BigData: Top 8 clases de #analytics para negocios #IBMInsight #IBMPartners http://t.co/nxFpansqjo http://t.co/VTM5H3wSOE\", \n",
      "  \"is_quote_status\": false, \n",
      "  \"in_reply_to_status_id\": null, \n",
      "  \"id\": 648877578015502336, \n",
      "  \"favorite_count\": 0, \n",
      "  \"source\": \"<a href=\\\"http://login.voicestorm.com\\\" rel=\\\"nofollow\\\">VoiceStorm</a>\", \n",
      "  \"retweeted\": false, \n",
      "  \"coordinates\": null, \n",
      "  \"entities\": {\n",
      "   \"symbols\": [], \n",
      "   \"user_mentions\": [], \n",
      "   \"hashtags\": [\n",
      "    {\n",
      "     \"indices\": [\n",
      "      14, \n",
      "      22\n",
      "     ], \n",
      "     \"text\": \"BigData\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      40, \n",
      "      50\n",
      "     ], \n",
      "     \"text\": \"analytics\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      65, \n",
      "      76\n",
      "     ], \n",
      "     \"text\": \"IBMInsight\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      77, \n",
      "      89\n",
      "     ], \n",
      "     \"text\": \"IBMPartners\"\n",
      "    }\n",
      "   ], \n",
      "   \"urls\": [\n",
      "    {\n",
      "     \"url\": \"http://t.co/nxFpansqjo\", \n",
      "     \"indices\": [\n",
      "      90, \n",
      "      112\n",
      "     ], \n",
      "     \"expanded_url\": \"http://bit.ly/1jur74f\", \n",
      "     \"display_url\": \"bit.ly/1jur74f\"\n",
      "    }\n",
      "   ], \n",
      "   \"media\": [\n",
      "    {\n",
      "     \"expanded_url\": \"http://twitter.com/IBMPartnerLA/status/648877578015502336/photo/1\", \n",
      "     \"display_url\": \"pic.twitter.com/VTM5H3wSOE\", \n",
      "     \"url\": \"http://t.co/VTM5H3wSOE\", \n",
      "     \"media_url_https\": \"https://pbs.twimg.com/media/CQFGuBiUwAADg5m.png\", \n",
      "     \"id_str\": \"648877577818390528\", \n",
      "     \"sizes\": {\n",
      "      \"large\": {\n",
      "       \"h\": 256, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 640\n",
      "      }, \n",
      "      \"small\": {\n",
      "       \"h\": 136, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 340\n",
      "      }, \n",
      "      \"medium\": {\n",
      "       \"h\": 240, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 600\n",
      "      }, \n",
      "      \"thumb\": {\n",
      "       \"h\": 150, \n",
      "       \"resize\": \"crop\", \n",
      "       \"w\": 150\n",
      "      }\n",
      "     }, \n",
      "     \"indices\": [\n",
      "      113, \n",
      "      135\n",
      "     ], \n",
      "     \"type\": \"photo\", \n",
      "     \"id\": 648877577818390528, \n",
      "     \"media_url\": \"http://pbs.twimg.com/media/CQFGuBiUwAADg5m.png\"\n",
      "    }\n",
      "   ]\n",
      "  }, \n",
      "  \"in_reply_to_screen_name\": null, \n",
      "  \"in_reply_to_user_id\": null, \n",
      "  \"retweet_count\": 0, \n",
      "  \"id_str\": \"648877578015502336\", \n",
      "  \"favorited\": false, \n",
      "  \"user\": {\n",
      "   \"follow_request_sent\": false, \n",
      "   \"has_extended_profile\": false, \n",
      "   \"profile_use_background_image\": true, \n",
      "   \"default_profile_image\": false, \n",
      "   \"id\": 2376462974, \n",
      "   \"profile_background_image_url_https\": \"https://pbs.twimg.com/profile_background_images/442035923782356992/sYeaA3j2.jpeg\", \n",
      "   \"verified\": false, \n",
      "   \"profile_text_color\": \"333333\", \n",
      "   \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/442035755162931200/JBBi7cr5_normal.jpeg\", \n",
      "   \"profile_sidebar_fill_color\": \"DDEEF6\", \n",
      "   \"entities\": {\n",
      "    \"url\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"https://t.co/T5VATQGnC8\", \n",
      "       \"indices\": [\n",
      "        0, \n",
      "        23\n",
      "       ], \n",
      "       \"expanded_url\": \"https://www-304.ibm.com/partnerworld/wps/servlet/mem/ContentHandler/pw_av_res_index/lc=es_CO\", \n",
      "       \"display_url\": \"www-304.ibm.com/partnerworld/w\\u2026\"\n",
      "      }\n",
      "     ]\n",
      "    }, \n",
      "    \"description\": {\n",
      "     \"urls\": []\n",
      "    }\n",
      "   }, \n",
      "   \"followers_count\": 389, \n",
      "   \"profile_sidebar_border_color\": \"FFFFFF\", \n",
      "   \"id_str\": \"2376462974\", \n",
      "   \"profile_background_color\": \"C0DEED\", \n",
      "   \"listed_count\": 30, \n",
      "   \"is_translation_enabled\": false, \n",
      "   \"utc_offset\": -10800, \n",
      "   \"statuses_count\": 1060, \n",
      "   \"description\": \"Un canal para ofrecer contenido de IBM para Asociados de Negocios de una manera simple y directa. Ese perfil es gerenciado por Stefanie Laufer y Alexia Salkeld.\", \n",
      "   \"friends_count\": 503, \n",
      "   \"location\": \"Latin America\", \n",
      "   \"profile_link_color\": \"0084B4\", \n",
      "   \"profile_image_url\": \"http://pbs.twimg.com/profile_images/442035755162931200/JBBi7cr5_normal.jpeg\", \n",
      "   \"following\": false, \n",
      "   \"geo_enabled\": false, \n",
      "   \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/2376462974/1424447599\", \n",
      "   \"profile_background_image_url\": \"http://pbs.twimg.com/profile_background_images/442035923782356992/sYeaA3j2.jpeg\", \n",
      "   \"screen_name\": \"IBMPartnerLA\", \n",
      "   \"lang\": \"es\", \n",
      "   \"profile_background_tile\": false, \n",
      "   \"favourites_count\": 3, \n",
      "   \"name\": \"IBM Business Partner\", \n",
      "   \"notifications\": false, \n",
      "   \"url\": \"https://t.co/T5VATQGnC8\", \n",
      "   \"created_at\": \"Fri Mar 07 03:03:32 +0000 2014\", \n",
      "   \"contributors_enabled\": false, \n",
      "   \"time_zone\": \"Buenos Aires\", \n",
      "   \"protected\": false, \n",
      "   \"default_profile\": false, \n",
      "   \"is_translator\": false\n",
      "  }, \n",
      "  \"geo\": null, \n",
      "  \"in_reply_to_user_id_str\": null, \n",
      "  \"possibly_sensitive\": true, \n",
      "  \"lang\": \"es\", \n",
      "  \"created_at\": \"Tue Sep 29 15:10:44 +0000 2015\", \n",
      "  \"in_reply_to_status_id_str\": null, \n",
      "  \"place\": null, \n",
      "  \"metadata\": {\n",
      "   \"iso_language_code\": \"es\", \n",
      "   \"result_type\": \"recent\"\n",
      "  }\n",
      " }, \n",
      " {\n",
      "  \"contributors\": null, \n",
      "  \"truncated\": false, \n",
      "  \"text\": \"#ALS Ice Bucket Challenge - mining #YouTube using #python to measure its impact. http://t.co/WPFiBywPxD #analytics http://t.co/kBYMxK9r5f\", \n",
      "  \"is_quote_status\": false, \n",
      "  \"in_reply_to_status_id\": null, \n",
      "  \"id\": 648877509136752640, \n",
      "  \"favorite_count\": 0, \n",
      "  \"source\": \"<a href=\\\"http://www.hootsuite.com\\\" rel=\\\"nofollow\\\">Hootsuite</a>\", \n",
      "  \"retweeted\": false, \n",
      "  \"coordinates\": null, \n",
      "  \"entities\": {\n",
      "   \"symbols\": [], \n",
      "   \"user_mentions\": [], \n",
      "   \"hashtags\": [\n",
      "    {\n",
      "     \"indices\": [\n",
      "      0, \n",
      "      4\n",
      "     ], \n",
      "     \"text\": \"ALS\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      35, \n",
      "      43\n",
      "     ], \n",
      "     \"text\": \"YouTube\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      50, \n",
      "      57\n",
      "     ], \n",
      "     \"text\": \"python\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      104, \n",
      "      114\n",
      "     ], \n",
      "     \"text\": \"analytics\"\n",
      "    }\n",
      "   ], \n",
      "   \"urls\": [\n",
      "    {\n",
      "     \"url\": \"http://t.co/WPFiBywPxD\", \n",
      "     \"indices\": [\n",
      "      81, \n",
      "      103\n",
      "     ], \n",
      "     \"expanded_url\": \"http://ow.ly/SMAyW\", \n",
      "     \"display_url\": \"ow.ly/SMAyW\"\n",
      "    }\n",
      "   ], \n",
      "   \"media\": [\n",
      "    {\n",
      "     \"expanded_url\": \"http://twitter.com/AnalyticsVidhya/status/648877509136752640/photo/1\", \n",
      "     \"display_url\": \"pic.twitter.com/kBYMxK9r5f\", \n",
      "     \"url\": \"http://t.co/kBYMxK9r5f\", \n",
      "     \"media_url_https\": \"https://pbs.twimg.com/media/CQFGqA_WwAAEOZw.jpg\", \n",
      "     \"id_str\": \"648877508952244224\", \n",
      "     \"sizes\": {\n",
      "      \"small\": {\n",
      "       \"h\": 218, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 340\n",
      "      }, \n",
      "      \"large\": {\n",
      "       \"h\": 567, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 881\n",
      "      }, \n",
      "      \"medium\": {\n",
      "       \"h\": 385, \n",
      "       \"resize\": \"fit\", \n",
      "       \"w\": 600\n",
      "      }, \n",
      "      \"thumb\": {\n",
      "       \"h\": 150, \n",
      "       \"resize\": \"crop\", \n",
      "       \"w\": 150\n",
      "      }\n",
      "     }, \n",
      "     \"indices\": [\n",
      "      115, \n",
      "      137\n",
      "     ], \n",
      "     \"type\": \"photo\", \n",
      "     \"id\": 648877508952244224, \n",
      "     \"media_url\": \"http://pbs.twimg.com/media/CQFGqA_WwAAEOZw.jpg\"\n",
      "    }\n",
      "   ]\n",
      "  }, \n",
      "  \"in_reply_to_screen_name\": null, \n",
      "  \"in_reply_to_user_id\": null, \n",
      "  \"retweet_count\": 0, \n",
      "  \"id_str\": \"648877509136752640\", \n",
      "  \"favorited\": false, \n",
      "  \"user\": {\n",
      "   \"follow_request_sent\": false, \n",
      "   \"has_extended_profile\": false, \n",
      "   \"profile_use_background_image\": true, \n",
      "   \"default_profile_image\": false, \n",
      "   \"id\": 2311645130, \n",
      "   \"profile_background_image_url_https\": \"https://pbs.twimg.com/profile_background_images/457786821649240064/WZcdBv8n.jpeg\", \n",
      "   \"verified\": false, \n",
      "   \"profile_text_color\": \"333333\", \n",
      "   \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/457775762108448768/XmO2C1-E_normal.png\", \n",
      "   \"profile_sidebar_fill_color\": \"DDEEF6\", \n",
      "   \"entities\": {\n",
      "    \"url\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"http://t.co/Nvpdo2isym\", \n",
      "       \"indices\": [\n",
      "        0, \n",
      "        22\n",
      "       ], \n",
      "       \"expanded_url\": \"http://www.analyticsvidhya.com/\", \n",
      "       \"display_url\": \"analyticsvidhya.com\"\n",
      "      }\n",
      "     ]\n",
      "    }, \n",
      "    \"description\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"http://t.co/lYZ4PMEb5i\", \n",
      "       \"indices\": [\n",
      "        108, \n",
      "        130\n",
      "       ], \n",
      "       \"expanded_url\": \"http://buff.ly/1Vic3rx\", \n",
      "       \"display_url\": \"buff.ly/1Vic3rx\"\n",
      "      }\n",
      "     ]\n",
      "    }\n",
      "   }, \n",
      "   \"followers_count\": 2515, \n",
      "   \"profile_sidebar_border_color\": \"FFFFFF\", \n",
      "   \"id_str\": \"2311645130\", \n",
      "   \"profile_background_color\": \"131516\", \n",
      "   \"listed_count\": 290, \n",
      "   \"is_translation_enabled\": false, \n",
      "   \"utc_offset\": null, \n",
      "   \"statuses_count\": 3277, \n",
      "   \"description\": \"Community for learning Data Science | Analytics | Machine Learning | Data Mining. This week's popular blog: http://t.co/lYZ4PMEb5i\", \n",
      "   \"friends_count\": 187, \n",
      "   \"location\": \"\", \n",
      "   \"profile_link_color\": \"009999\", \n",
      "   \"profile_image_url\": \"http://pbs.twimg.com/profile_images/457775762108448768/XmO2C1-E_normal.png\", \n",
      "   \"following\": false, \n",
      "   \"geo_enabled\": false, \n",
      "   \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/2311645130/1441787958\", \n",
      "   \"profile_background_image_url\": \"http://pbs.twimg.com/profile_background_images/457786821649240064/WZcdBv8n.jpeg\", \n",
      "   \"screen_name\": \"AnalyticsVidhya\", \n",
      "   \"lang\": \"en\", \n",
      "   \"profile_background_tile\": false, \n",
      "   \"favourites_count\": 373, \n",
      "   \"name\": \"Analytics Vidhya\", \n",
      "   \"notifications\": false, \n",
      "   \"url\": \"http://t.co/Nvpdo2isym\", \n",
      "   \"created_at\": \"Sun Jan 26 10:48:31 +0000 2014\", \n",
      "   \"contributors_enabled\": false, \n",
      "   \"time_zone\": null, \n",
      "   \"protected\": false, \n",
      "   \"default_profile\": false, \n",
      "   \"is_translator\": false\n",
      "  }, \n",
      "  \"geo\": null, \n",
      "  \"in_reply_to_user_id_str\": null, \n",
      "  \"possibly_sensitive\": false, \n",
      "  \"lang\": \"en\", \n",
      "  \"created_at\": \"Tue Sep 29 15:10:28 +0000 2015\", \n",
      "  \"in_reply_to_status_id_str\": null, \n",
      "  \"place\": null, \n",
      "  \"metadata\": {\n",
      "   \"iso_language_code\": \"en\", \n",
      "   \"result_type\": \"recent\"\n",
      "  }\n",
      " }, \n",
      " {\n",
      "  \"contributors\": null, \n",
      "  \"truncated\": false, \n",
      "  \"text\": \".@HRIQ A #Cloud #HR #Analytics platform to equate goals against #KPIs and rate #PerformanceMetrics #WNSHRO\", \n",
      "  \"is_quote_status\": false, \n",
      "  \"in_reply_to_status_id\": 648877092084563968, \n",
      "  \"id\": 648877478543429632, \n",
      "  \"favorite_count\": 1, \n",
      "  \"source\": \"<a href=\\\"http://twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web Client</a>\", \n",
      "  \"retweeted\": false, \n",
      "  \"coordinates\": null, \n",
      "  \"entities\": {\n",
      "   \"symbols\": [], \n",
      "   \"user_mentions\": [\n",
      "    {\n",
      "     \"id\": 17964389, \n",
      "     \"indices\": [\n",
      "      1, \n",
      "      6\n",
      "     ], \n",
      "     \"id_str\": \"17964389\", \n",
      "     \"screen_name\": \"HRIQ\", \n",
      "     \"name\": \"Human Resources IQ\"\n",
      "    }\n",
      "   ], \n",
      "   \"hashtags\": [\n",
      "    {\n",
      "     \"indices\": [\n",
      "      9, \n",
      "      15\n",
      "     ], \n",
      "     \"text\": \"Cloud\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      16, \n",
      "      19\n",
      "     ], \n",
      "     \"text\": \"HR\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      20, \n",
      "      30\n",
      "     ], \n",
      "     \"text\": \"Analytics\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      64, \n",
      "      69\n",
      "     ], \n",
      "     \"text\": \"KPIs\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      79, \n",
      "      98\n",
      "     ], \n",
      "     \"text\": \"PerformanceMetrics\"\n",
      "    }, \n",
      "    {\n",
      "     \"indices\": [\n",
      "      99, \n",
      "      106\n",
      "     ], \n",
      "     \"text\": \"WNSHRO\"\n",
      "    }\n",
      "   ], \n",
      "   \"urls\": []\n",
      "  }, \n",
      "  \"in_reply_to_screen_name\": \"HRIQ\", \n",
      "  \"in_reply_to_user_id\": 17964389, \n",
      "  \"retweet_count\": 0, \n",
      "  \"id_str\": \"648877478543429632\", \n",
      "  \"favorited\": false, \n",
      "  \"user\": {\n",
      "   \"follow_request_sent\": false, \n",
      "   \"has_extended_profile\": false, \n",
      "   \"profile_use_background_image\": true, \n",
      "   \"default_profile_image\": false, \n",
      "   \"id\": 35702175, \n",
      "   \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"verified\": false, \n",
      "   \"profile_text_color\": \"333333\", \n",
      "   \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/509660745928171521/ICAhYMo__normal.jpeg\", \n",
      "   \"profile_sidebar_fill_color\": \"DDEEF6\", \n",
      "   \"entities\": {\n",
      "    \"url\": {\n",
      "     \"urls\": [\n",
      "      {\n",
      "       \"url\": \"http://t.co/KN023ine8X\", \n",
      "       \"indices\": [\n",
      "        0, \n",
      "        22\n",
      "       ], \n",
      "       \"expanded_url\": \"http://www.wns.com\", \n",
      "       \"display_url\": \"wns.com\"\n",
      "      }\n",
      "     ]\n",
      "    }, \n",
      "    \"description\": {\n",
      "     \"urls\": []\n",
      "    }\n",
      "   }, \n",
      "   \"followers_count\": 166, \n",
      "   \"profile_sidebar_border_color\": \"C0DEED\", \n",
      "   \"id_str\": \"35702175\", \n",
      "   \"profile_background_color\": \"C0DEED\", \n",
      "   \"listed_count\": 7, \n",
      "   \"is_translation_enabled\": false, \n",
      "   \"utc_offset\": null, \n",
      "   \"statuses_count\": 153, \n",
      "   \"description\": \"Chief People Officer @WNSHoldings; certified Change Acceleration Coach and a keen practitioner of Six Sigma\", \n",
      "   \"friends_count\": 68, \n",
      "   \"location\": \"Chennai\", \n",
      "   \"profile_link_color\": \"0084B4\", \n",
      "   \"profile_image_url\": \"http://pbs.twimg.com/profile_images/509660745928171521/ICAhYMo__normal.jpeg\", \n",
      "   \"following\": false, \n",
      "   \"geo_enabled\": false, \n",
      "   \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \n",
      "   \"screen_name\": \"swam2007\", \n",
      "   \"lang\": \"en\", \n",
      "   \"profile_background_tile\": false, \n",
      "   \"favourites_count\": 8, \n",
      "   \"name\": \"Swaminathan \", \n",
      "   \"notifications\": false, \n",
      "   \"url\": \"http://t.co/KN023ine8X\", \n",
      "   \"created_at\": \"Mon Apr 27 08:39:09 +0000 2009\", \n",
      "   \"contributors_enabled\": false, \n",
      "   \"time_zone\": null, \n",
      "   \"protected\": false, \n",
      "   \"default_profile\": true, \n",
      "   \"is_translator\": false\n",
      "  }, \n",
      "  \"geo\": null, \n",
      "  \"in_reply_to_user_id_str\": \"17964389\", \n",
      "  \"lang\": \"en\", \n",
      "  \"created_at\": \"Tue Sep 29 15:10:21 +0000 2015\", \n",
      "  \"in_reply_to_status_id_str\": \"648877092084563968\", \n",
      "  \"place\": null, \n",
      "  \"metadata\": {\n",
      "   \"iso_language_code\": \"en\", \n",
      "   \"result_type\": \"recent\"\n",
      "  }\n",
      " }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "#Print several\n",
    "print json.dumps(statuses[0:5], indent=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5. Extracting text, screen names, and hashtags from tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'statuses' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-1572ff2bdc71>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#We can access an individual tweet like so:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mstatuses\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'text'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'statuses' is not defined"
     ]
    }
   ],
   "source": [
    "#We can access an individual tweet like so:\n",
    "statuses[1]['text']\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "statuses[1]['entities']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{u'indices': [0, 10], u'text': u'Analytics'},\n",
       " {u'indices': [116, 136], u'text': u'socialmediaanalytic'}]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#notice the nested relationships.  We have to take notice of this to further access the data.\n",
    "statuses[1]['entities']['hashtags']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      " \"u_t=10x^2u_xx+(10x + 4t)u_x+-2u with u(x,s)=cos(1*x^4+8)\\n http://t.co/rrFFceh1Xw #bigdata #analytics http://t.co/7sIsvxCg3K\", \n",
      " \"How Google Understands You [Infographic] http://t.co/PnlBUM7tKv #infographic #bigdata #search #analytics\", \n",
      " \"Tendencias de #BigData: Top 8 clases de #analytics para negocios #IBMInsight #IBMPartners http://t.co/nxFpansqjo http://t.co/VTM5H3wSOE\", \n",
      " \"#ALS Ice Bucket Challenge - mining #YouTube using #python to measure its impact. http://t.co/WPFiBywPxD #analytics http://t.co/kBYMxK9r5f\", \n",
      " \".@HRIQ A #Cloud #HR #Analytics platform to equate goals against #KPIs and rate #PerformanceMetrics #WNSHRO\"\n",
      "]\n",
      "[\n",
      " \"HRIQ\", \n",
      " \"NetDimensions\", \n",
      " \"fosway\", \n",
      " \"jose_garde\", \n",
      " \"jose_garde\"\n",
      "]\n",
      "[\n",
      " \"bigdata\", \n",
      " \"analytics\", \n",
      " \"infographic\", \n",
      " \"bigdata\", \n",
      " \"search\"\n",
      "]\n",
      "[\n",
      " \"u_t=10x^2u_xx+(10x\", \n",
      " \"+\", \n",
      " \"4t)u_x+-2u\", \n",
      " \"with\", \n",
      " \"u(x,s)=cos(1*x^4+8)\"\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "status_texts = [ status['text'] \n",
    "                 for status in statuses ]\n",
    "\n",
    "screen_names = [ user_mention['screen_name'] \n",
    "                 for status in statuses\n",
    "                     for user_mention in status['entities']['user_mentions'] ]\n",
    "\n",
    "hashtags = [ hashtag['text'] \n",
    "             for status in statuses\n",
    "                 for hashtag in status['entities']['hashtags'] ]\n",
    "\n",
    "urls = [ url['url'] \n",
    "             for status in statuses\n",
    "                 for url in status['entities']['urls'] ]\n",
    "\n",
    "\n",
    "\n",
    "# Compute a collection of all words from all tweets\n",
    "words = [ w \n",
    "          for t in status_texts \n",
    "              for w in t.split() ]\n",
    "\n",
    "# Explore the first 5 items for each...\n",
    "\n",
    "print json.dumps(status_texts[0:5], indent=1)\n",
    "print json.dumps(screen_names[0:5], indent=1) \n",
    "print json.dumps(hashtags[0:5], indent=1)\n",
    "print json.dumps(words[0:5], indent=1)\n",
    "print json.dumps(urls[0:5], indent=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6. Creating a basic frequency distribution from the words in tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(u'RT', 299), (u'#analytics', 296), (u'The', 206), (u'#Analytics', 186), (u'to', 133), (u'#BigData', 121), (u'Data', 116), (u'the', 111), (u'for', 88), (u'of', 81)]\n",
      "\n",
      "[(u'craigbrownphd', 64), (u'KirkDBorne', 37), (u'IBMbigdata', 17), (u'DataScienceCtrl', 15), (u'robertoglezcano', 14), (u'jose_garde', 11), (u'BoozAllen', 9), (u'swam2007', 8), (u'EvanSinar', 7), (u'HRIQ', 6)]\n",
      "\n",
      "[(u'analytics', 329), (u'Analytics', 270), (u'BigData', 199), (u'bigdata', 59), (u'DataScience', 44), (u'data', 28), (u'DataScientists', 14), (u'WNSHRO', 14), (u'abdsc', 13), (u'Cloud', 13)]\n",
      "\n",
      "[(u'http://t.co/DwMHhpfOyC', 64), (u'http://t.co/8abUfsxkOG', 17), (u'http://t.co/PkQQ6byL0N', 14), (u'http://t.co/hYarGy1KUB', 9), (u'http://t.co/AMl2qvgIfH', 8), (u'http://t.co/hRndJJtff1', 7), (u'http://t.co/rrFFcdZr5Y', 7), (u'http://t.co/tDDBX0yt08', 6), (u'http://t.co/2Vdrd0mlEw', 5), (u'http://t.co/crxbVkfqrN', 4)]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "for item in [words, screen_names, hashtags, urls]:\n",
    "    c = Counter(item)\n",
    "    print c.most_common()[:10] # top 10\n",
    "    print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7. Using prettytable to display tuples in a nice tabular format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-------+\n",
      "| Word       | Count |\n",
      "+------------+-------+\n",
      "| RT         |   299 |\n",
      "| #analytics |   296 |\n",
      "| The        |   206 |\n",
      "| #Analytics |   186 |\n",
      "| to         |   133 |\n",
      "| #BigData   |   121 |\n",
      "| Data       |   116 |\n",
      "| the        |   111 |\n",
      "| for        |    88 |\n",
      "| of         |    81 |\n",
      "+------------+-------+\n",
      "+-----------------+-------+\n",
      "| Screen Name     | Count |\n",
      "+-----------------+-------+\n",
      "| craigbrownphd   |    64 |\n",
      "| KirkDBorne      |    37 |\n",
      "| IBMbigdata      |    17 |\n",
      "| DataScienceCtrl |    15 |\n",
      "| robertoglezcano |    14 |\n",
      "| jose_garde      |    11 |\n",
      "| BoozAllen       |     9 |\n",
      "| swam2007        |     8 |\n",
      "| EvanSinar       |     7 |\n",
      "| HRIQ            |     6 |\n",
      "+-----------------+-------+\n",
      "+----------------+-------+\n",
      "| Hashtag        | Count |\n",
      "+----------------+-------+\n",
      "| analytics      |   329 |\n",
      "| Analytics      |   270 |\n",
      "| BigData        |   199 |\n",
      "| bigdata        |    59 |\n",
      "| DataScience    |    44 |\n",
      "| data           |    28 |\n",
      "| DataScientists |    14 |\n",
      "| WNSHRO         |    14 |\n",
      "| abdsc          |    13 |\n",
      "| Cloud          |    13 |\n",
      "+----------------+-------+\n",
      "+------------------------+-------+\n",
      "| URLs                   | Count |\n",
      "+------------------------+-------+\n",
      "| http://t.co/DwMHhpfOyC |    64 |\n",
      "| http://t.co/8abUfsxkOG |    17 |\n",
      "| http://t.co/PkQQ6byL0N |    14 |\n",
      "| http://t.co/hYarGy1KUB |     9 |\n",
      "| http://t.co/AMl2qvgIfH |     8 |\n",
      "| http://t.co/hRndJJtff1 |     7 |\n",
      "| http://t.co/rrFFcdZr5Y |     7 |\n",
      "| http://t.co/tDDBX0yt08 |     6 |\n",
      "| http://t.co/2Vdrd0mlEw |     5 |\n",
      "| http://t.co/crxbVkfqrN |     4 |\n",
      "+------------------------+-------+\n"
     ]
    }
   ],
   "source": [
    "from prettytable import PrettyTable\n",
    "\n",
    "for label, data in (('Word', words), \n",
    "                    ('Screen Name', screen_names), \n",
    "                    ('Hashtag', hashtags),\n",
    "                   ('URLs', urls)):\n",
    "    pt = PrettyTable(field_names=[label, 'Count']) \n",
    "    c = Counter(data)\n",
    "    [ pt.add_row(kv) for kv in c.most_common()[:10] ]\n",
    "    pt.align[label], pt.align['Count'] = 'l', 'r' # Set column alignment\n",
    "    print pt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solutions Questions. \n",
    "(1) Describe the structure of the content of the output from the trends.place. \n",
    "\n",
    "You can read more about the api output [here](https://dev.twitter.com/rest/reference/get/trends/place).\n",
    "\n",
    "The trends API returns a header with the 4 outcomes.  The url, query (unicode of name), name, and whether it is ppromoted comment.\n",
    "   \"url\": \"http://twitter.com/search?q=%23piggate\", \n",
    "    \"query\": \"%23piggate\", \n",
    "    \"name\": \"#piggate\", \n",
    "    \"promoted_content\": null\n",
    "    \n",
    "    \n",
    "(2) What might be the value of understanding Twitter trends from specific areas of the world?  Give one potential use case.\n",
    "\n",
    "You may want to understand local trends to post data likely to be engaging and of interest to your followers.  By following and incorporating trending materials, you can be more relevant to your users. \n",
    "\n",
    "(3)  What is meant by *following the cursor*, in the API example.\n",
    "\n",
    "Following the cursor allows you to get a large number of tweets by connecting multiple times to the Twitter API and obtaining a limited amount in each case. When looping through a large number of tweets you end up passing an identifier with the last tweet processed.  This allows you to limit the number of records in any single pass and the API doesn't have to keep any session data (RESTFUL APIs must be stateless). \n",
    "\n",
    "\n",
    "(4) Pick a specific  hashtag different from analytic that provided in the example.  Provide a list of related hash tags, users, and words using the analysis specified. \n",
    "\n",
    "The outcome should be something like this but for an additional hashtag.\n",
    "\n",
    "+----------------+-------+\n",
    "| Word           | Count |\n",
    "+----------------+-------+\n",
    "| #Analytics     |   300 |\n",
    "| RT             |   285 |\n",
    "| #analytics     |   236 |\n",
    "| of             |   154 |\n",
    "| #BigData       |   140 |\n",
    "| is             |   107 |\n",
    "| JohnnyKakes00: |   102 |\n",
    "| the            |    97 |\n",
    "| to             |    95 |\n",
    "| for            |    94 |\n",
    "+----------------+-------+\n",
    "+-----------------+-------+\n",
    "| Screen Name     | Count |\n",
    "+-----------------+-------+\n",
    "| KirkDBorne      |    35 |\n",
    "| ClearGrip       |    15 |\n",
    "| Shintucj3838    |    11 |\n",
    "| HCITExpert      |     9 |\n",
    "| Geeksplace      |     8 |\n",
    "| TungstenBigData |     6 |\n",
    "| CouthonConseil  |     5 |\n",
    "| eric_kavanagh   |     5 |\n",
    "| VishAgashe      |     5 |\n",
    "| lisabriercliffe |     5 |\n",
    "+-----------------+-------+\n",
    "+-----------+-------+\n",
    "| Hashtag   | Count |\n",
    "+-----------+-------+\n",
    "| Analytics |   333 |\n",
    "| analytics |   266 |\n",
    "| BigData   |   155 |\n",
    "| bigdata   |    82 |\n",
    "| IoT       |    68 |\n",
    "| API       |    63 |\n",
    "| SEO       |    60 |\n",
    "| fintech   |    58 |\n",
    "| DevOps    |    51 |\n",
    "| CRO       |    51 |\n",
    "+-----------+-------+\n",
    "\n",
    " \n",
    "5. Adjust the analysis to also include the most frequent URLs.  Provide a screen shot output of the most frequent URLs in addition to the Python code used.\n",
    "\n",
    "\n",
    "####Additions have been added above.  This creates a new varaible called URLs that  tempor\n",
    "urls = [ url['url'] \n",
    "             for status in statuses\n",
    "                 for url in status['entities']['urls'] ]\n",
    "print json.dumps(urls[0:5], indent=1)\n",
    "\n",
    "from collections import Counter\n",
    "\n",
    "for item in [words, screen_names, hashtags, urls]:\n",
    "    c = Counter(item)\n",
    "    print c.most_common()[:10] # top 10\n",
    "    print\n",
    "\n",
    "for label, data in (('Word', words), \n",
    "                    ('Screen Name', screen_names), \n",
    "                    ('Hashtag', hashtags),\n",
    "                   ('URLs', urls)):\n",
    "    pt = PrettyTable(field_names=[label, 'Count']) \n",
    "    c = Counter(data)\n",
    "    [ pt.add_row(kv) for kv in c.most_common()[:10] ]\n",
    "    pt.align[label], pt.align['Count'] = 'l', 'r' # Set column alignment\n",
    "    print pt\n",
    "    \n",
    "    \n",
    "+------------------------+-------+\n",
    "| URLs                   | Count |\n",
    "+------------------------+-------+\n",
    "| http://t.co/DwMHhpfOyC |    64 |\n",
    "| http://t.co/8abUfsxkOG |    17 |\n",
    "| http://t.co/PkQQ6byL0N |    14 |\n",
    "| http://t.co/hYarGy1KUB |     9 |\n",
    "| http://t.co/AMl2qvgIfH |     8 |\n",
    "| http://t.co/hRndJJtff1 |     7 |\n",
    "| http://t.co/rrFFcdZr5Y |     7 |\n",
    "| http://t.co/tDDBX0yt08 |     6 |\n",
    "| http://t.co/2Vdrd0mlEw |     5 |\n",
    "| http://t.co/crxbVkfqrN |     4 |\n",
    "+------------------------+-------+\n",
    "\n",
    "### Web Scraping\n",
    "\n",
    "[Download Webmining Notebook](http://rpi-analytics.github.io/MGMT6963-2015/assets/ipython/Lab3_Webmining.ipynb)\n",
    "[View Webmining Notebook](https://github.com/RPI-Analytics/MGMT6963-2015/blob/gh-pages/assets/ipython/Lab3_Webmining.ipynb)\n",
    "\n",
    "7.  Pick a structured web page in which you would like to extract some information.  Try not to pick anything that is too complex. Use what you understood from the reading and lecture to describe a the process of extracting information from a web page using beautiful soup. \n",
    "\n",
    "Header photo salve-a-terra--twitter_4251_1280x800 by [Danilo Ramos](https://flic.kr/p/6SAs7o)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
